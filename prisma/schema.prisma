// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  password      String
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  ResumeContent ResumeContent?
  Resume        Resume[]
  Formation     Formation[]
  Experience    Experience[]
  Language      Language[]
}

model Resume {
  id         Int       @id @default(autoincrement())
  title      String
  templateId Int?
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template? @relation(fields: [templateId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Template {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  resumes   Resume[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResumeContent {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  fullName   String
  email      String
  phone      String
  objective  String
  summary    String
  keywords   String[]
  techSkills String[]
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Formation {
  id          Int       @id @default(autoincrement())
  userId      Int
  institution String
  course      String
  startDate   DateTime?
  endDate     DateTime?
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Experience {
  id               Int       @id @default(autoincrement())
  userId           Int
  company          String
  role             String
  startDate        DateTime?
  endDate          DateTime?
  responsibilities String[]
  user             User      @relation(fields: [userId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Language {
  id     Int    @id @default(autoincrement())
  userId Int
  name   String
  level  String
  user   User   @relation(fields: [userId], references: [id])
}
